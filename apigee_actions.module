<?php

/**
 * Copyright 2020 Google Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 */

use Drupal\apigee_actions\Event\EdgeEntityEvent;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_insert().
 */
function apigee_actions_entity_insert(EntityInterface $entity) {
  _apigee_actions_dispatch_entity_event($entity, 'insert');
}

/**
 * Implements hook_entity_delete().
 */
function apigee_actions_entity_delete(EntityInterface $entity) {
  _apigee_actions_dispatch_entity_event($entity, 'delete');
}

/**
 * Helper to dispatch an entity event.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 * @param string $event_name
 *   The event name.
 */
function _apigee_actions_dispatch_entity_event(EntityInterface $entity, string $event_name) {
  if (Drupal::service('apigee_actions.edge_entity_type_manager')->isEdgeEntityType($entity->getEntityType())) {
    $event_name = "apigee_actions_entity_$event_name:{$entity->getEntityTypeId()}";

    Drupal::logger('apigee_actions')->notice("Event $event_name was dispatched.");

    /** @var \Drupal\apigee_edge\Entity\EdgeEntityInterface $entity */
    Drupal::service('event_dispatcher')
      ->dispatch($event_name, new EdgeEntityEvent($entity, [$entity->getEntityTypeId() => $entity]));
  }
}
